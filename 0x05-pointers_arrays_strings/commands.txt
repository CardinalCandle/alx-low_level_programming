/alx-low_level_programming/0x05-pointers_arrays_strings

==========
0-main.c
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int n;

    n = 402;
    printf("n=%d\n", n);
    reset_to_98(&n);
    printf("n=%d\n", n);
    return (0);
}

==========
0-reset_to_98.c
#include "main.h"
/**
* reset_to_98 - takes a pointer to an int as parameter
* and updates the value it points to to 98.
* @n: pointer to an int
*/
void reset_to_98(int *n)
{
	*n = 98;
}

==========
main.h
#ifndef MAIN_H
#define MAIN_H
#include <stdio.h>
#include <math.h>
void reset_to_98(int *n);
void swap_int(int *a, int *b);
int _strlen(char *s);
void _puts(char *str);
int _putchar(char c);
void print_rev(char *s);
void rev_string(char *s);
void puts2(char *str);
void puts_half(char *str);
char *_strcpy(char *dest, char *src);
int _atoi(char *s);
#endif

==========
_putchar.c
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

==========
test.c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
/**
 * main - entry point generates a random password
 *
 * Return: the generated password
 */
int main(void)
{
char c;
int x;

srand(time(0));
while (x <= 2645)
{
c = rand() % 128;
x += c;
putchar(c);
}
putchar(2772 - x);
return (0);
}

==========
1-main.c
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int a;
    int b;

    a = 98;
    b = 42;
    printf("a=%d, b=%d\n", a, b);
    swap_int(&a, &b);
    printf("a=%d, b=%d\n", a, b);
    return (0);
}

==========
1-swap.c
#include "main.h"
/**
* swap_int - swaps the values of two integers
* @a: first int
* @b: second int
*/
void swap_int(int *a, int *b)
{
	int tmp;

	tmp = *a;
	*a = *b;
	*b = tmp;
}

==========
2-main.c
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;
    int len;

    str = "My first strlen!";
    len = _strlen(str);
    printf("%d\n", len);
    return (0);
}

==========
2-strlen.c
#include "main.h"
/**
* _strlen - returns the length of a string.
* @s: string
* Return: length in int
*/
int _strlen(char *s)
{
	int c = 0, i = 0;

	while (s[i++] != '\0')
	{
		c++;
	}
	return (c);
}

==========
3-main.c
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;

    str = "I do not fear computers. I fear the lack of them - Isaac Asimov";
    _puts(str);
    return (0);
}

==========
3-puts.c
#include "main.h"
/**
* _puts - prints a string, followed by a new line, to stdout.
* @str: string to print
*/
void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i++]);
	}
	_putchar('\n');
}

==========
4-main.c
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;

    str = "I do not fear computers. I fear the lack of them - Isaac Asimov";
    print_rev(str);
    return (0);
}

==========
4-print_rev.c
#include "main.h"
#include <string.h>
/**
* print_rev - prints a string, in reverse, followed by a new line.
* @s: string to reverse
*/
void print_rev(char *s)
{
	int c = strlen(s) - 1;

	while (c >= 0)
	{
		_putchar(s[c--]);
	}
	_putchar('\n');
}

==========
5-main.c
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char s[10] = "My School";

    printf("%s\n", s);
    rev_string(s);
    printf("%s\n", s);
    return (0);
}

==========
5-rev_string.c
#include "main.h"
#include <string.h>
/**
* rev_string - reverses a string
* @s: string to reverse
*/
void rev_string(char *s)
{
	int i, j, c = strlen(s);
	char st[1000];

	for (i = 0, j = c - 1; i < c ;)
	{
		st[i++] = s[j--];
	}
	st[i] = '\0';
	i = st[i];
	strcpy(s, st);
}

==========
6-main.c
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;

    str = "0123456789";
    puts2(str);
    return (0);
}

==========
6-puts2.c
#include "main.h"
#include <string.h>
/**
* puts2 - prints every other character of a string,
* starting with the first character, followed by a new line.
* @str: string to print from
*/
void puts2(char *str)
{
	int i, c = strlen(str);

	for (i = 0 ; i < c ; i++)
	{
		i % 2 == 0 ? _putchar(str[i]) : 0;
	}
	_putchar('\n');
}

==========
7-main.c
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *str;

    str = "0123456789";
    puts_half(str);
    return (0);
}

==========
7-puts_half.c
#include "main.h"
#include <string.h>
/**
*puts_half - puts half of a string
*@str: string to print
*/
void puts_half(char *str)
{
	int len = strlen(str);

	if (len % 2 == 0)
	{
		len = len / 2;
	}
	else
	{
		len = (len + 1) / 2;
	}

	while (str[len] != '\0')
	{
		_putchar(str[len++]);
	}
	_putchar('\n');
}

==========
8-print_array.c
#include "main.h"
/**
* print_array - prints n elements of an array
*	of integers, followed by a new line.
* @a: array
* @n: number of elements to print
*/
void print_array(int *a, int n)
{
	int i;

	for (i = 0; i < n; i++)
		i == n - 1 ? printf("%i", a[i]) : printf("%i, ", a[i]);
	putchar('\n');
}

==========
9-main.c
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char s1[98];
    char *ptr;

    ptr = _strcpy(s1, "First, solve the problem. Then, write the code\n");
    printf("%s", s1);
    printf("%s", ptr);
    return (0);
}

==========
9-strcpy.c
#include "main.h"
/**
* _strcpy - copies the string pointed to by src, including the
* terminating null byte (\0), to the buffer pointed to by dest.
* @dest: - destination pointer
* @src: source pointer
* Return: destination pointer
*/
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
		dest[i] = src[i];
	dest[i] = '\0';
	return (dest);
}

==========
100-atoi.c
#include "main.h"
#include <string.h>
/**
* _atoi - convert a string to an integer.
* @s: string
* Return: integer value or 0.
*/
int _atoi(char *s)
{
	int i;
	double  res = 0;
	char sign = '+';

	if (strlen(s) <= 0)
		return (0);
	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-' && sign != '-')
		{
			sign = '-';
		}
		else if (s[i] == '-' && sign == '-')
		{
			sign = '+';
		}
		else if (s[i] >= '0' && s[i] <= '9')
		{
			res = (res * 10) + (s[i] - '0');
			if (s[i + 1] == ' ')
				break;
		}
	}
	if (sign == '-')
		res = -res;
return (res);
}

==========
100-main.c
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int nb;

    nb = _atoi("98");
    printf("%d\n", nb);
    nb = _atoi("-402");
    printf("%d\n", nb);
    nb = _atoi("          ------++++++-----+++++--98");
    printf("%d\n", nb);
    nb = _atoi("214748364");
    printf("%d\n", nb);
    nb = _atoi("0");
    printf("%d\n", nb);
    nb = _atoi("Suite 402");
    printf("%d\n", nb);
    nb = _atoi("         +      +    -    -98 Battery Street; San Francisco, CA 94111 - USA             ");
    printf("%d\n", nb);
    nb = _atoi("---++++ -++ Sui - te -   402 #cisfun :)");
    printf("%d\n", nb);
    return (0);
}

==========
101-keygen.c
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(void)
{
    int pass[100];
    int i, sum, n;
    char c;

    sum = 0;
    srand(time(NULL));

    for (i = 0; i < 100; i++)
    {
        pass[i] = rand() % 78;
        sum += (pass[i] + '0');
        c = pass[i] + '0';
        putchar(c);
	/*
	* The 2772 comes from the crackme binary disassembled,
	* the checksum function only validates passwords whose
	* values are summed to exactly 2772 in ASCII code.
	*/
        if ((2772 - sum) - '0' < 78)
        {
            n = 2772 - sum - '0';
            sum += n;
            c = n + '0';
            putchar(c);
            break;
        }
    }

    return (0);
}


