/alx-low_level_programming/0x02-functions_nested_loops

====================
0-putchar.c :
#include <stdio.h>
/**
* main - Entry point
*
* Return: 0
*/
int main(void)
{
	printf("_putchar\n");
	return (0);
}

====================
main.h :
#ifndef MAIN_H
#define MAIN_H

void print_alphabet(void);
void print_alphabet_x10(void);
int _islower(int c);
int _putchar(char c);
int _isalpha(int c);
int print_sign(int n);
int _abs(int n);
int print_last_digit(int n);
void jack_bauer(void);
void times_table(void);
int add(int a, int b);
void print_to_98(int n);
void print_times_table(int n);
void sum_naturals(void);
#endif

====================
1-alphabet.c :
#include <stdio.h>
#include "main.h"

/**
* print_alphabet - prints lowercase alphabet using putchar
*
* Return: 0
*/
void print_alphabet(void)
{
char i = 'a';

for (i = 'a'; i <= 'z'; i++)
{
putchar(i);
}
putchar('\n');
}

====================
2-print_alphabet_x10.c :
#include <stdio.h>
#include "main.h"

/**
* print_alphabet_x10 - prints lowercase alphabet using putchar
*
* Return: 0
*/
void print_alphabet_x10(void)
{
char i = 'a';
int j = 0;
for (j = 0; j < 10; j++)
{
for (i = 'a'; i <= 'z'; i++)
{
putchar(i);
}
putchar('\n');
}
}

====================
3-islower.c :
#include <stdio.h>
#include <ctype.h>
#include "main.h"

/**
* _islower - checks for lowercase characters
* @c: letter as int
* Return: 0
*/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}

====================
4-isalpha.c :
#include <stdio.h>
#include <ctype.h>
#include "main.h"

/**
* _isalpha - checks for alphabetic characters
* @c: letter as int
* Return: 0
*/
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
{
return (1);
}
else
{
return (0);
}
}

====================
5-sign.c :
#include <stdio.h>
#include "main.h"

/**
* print_sign - print the number's sign
* @n: input as integer
* Return: 1, 0, or -1
*/
int print_sign(int n)
{
if (n > 0)
{
_putchar('+');
return (1);
}
if (n == 0)
{
_putchar('0');
return (0);
}
else
{
_putchar('-');
return (-1);
}
return (0);
}

====================
6-abs.c :
#include <stdio.h>
#include "main.h"

/**
* _abs - outputs the absolute value of an integer
* @n: integer to check
* Return: absolute value
*/
int _abs(int n)
{
if (n >= 0)
{
return (n);
}
else
{
return (n - (n * 2));
}
}

====================
7-print_last_digit.c :
#include <stdio.h>
#include "main.h"
/**
* print_last_digit - outputs the absolute value of an integer
* @n: number to check
* Return: value of the last digit
*/
int print_last_digit(int n)
{
int r;

if (n < 0)
{
n = -n;
}
r = n % 10;
if (r < 0)
{
r = -r;
}
_putchar(r + '0');
return (r);
}

====================
8-24_hours.c :
#include <stdio.h>
#include "main.h"
/**
* jack_bauer - prints every minute of the day of Jack Bauer,
* starting from 00:00 to 23:59
*
* Return: void
*/

void jack_bauer(void)
{
	int h, m;

	for (h = 0; h < 24; h++)
	{
		for (m = 0; m < 60; m++)
		{
			_putchar((h / 10) + '0');
			_putchar((h % 10) + '0');
			_putchar(':');
			_putchar((m / 10) + '0');
			_putchar((m % 10) + '0');
			_putchar('\n');
		}
	}
}

====================
9-times_table.c :
#include <stdio.h>
#include "main.h"
/**
* times_table - prints the 9 times table, starting with 0.
*
* Return: void
*/

void times_table(void)
{
	int i, j;

	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (j < 10)
			{
				if ((j * i) < 10 && j > 0)
				{
					putchar(',');
					putchar(' ');
					putchar(' ');
				}
				else if ((j * i) > 9)
				{
					putchar(',');
					putchar(' ');
				}
				}
				printf("%i", j * i);
		}
		putchar('\n');
	}
}

====================
10-add.c :
#include <stdio.h>
#include "main.h"
/**
* add - adds two integers and returns the result.
*@a: integer
*@b: integer
* Return: sum of integers
*/
int add(int a, int b)
{
	return (a + b);
}

====================
11-print_to_98.c :
#include <stdio.h>
#include "main.h"
/**
* print_to_98 - prints all natural numbers from n to 98,
*		followed by a new line.
* @n: integer value
* Return: void
*/

void print_to_98(int n)
{
	int i;

	if (n == 98)
	{
		printf("%i", n);
	}
	else if (n > 98)
	{
		for (i = n; i >= 98; i--)
		{
			if (i == 98)
			{
				printf("%i", i);
			}
			else
			{
				printf("%i, ", i);
			}
		}
	}
	else
	{
		for (i = n; i < 99; i++)
		{
			if (i == 98)
			{
				printf("%i", i);
			}
			else
			{
				printf("%i, ", i);
			}
		}
	}
	putchar('\n');
}

====================
100-times_table.c :
#include <stdio.h>
#include "main.h"
/**
* print_times_table - prints the n times table, starting with 0.
* @n: integer
* Return: void
*/

void print_times_table(int n)
{
int i, j, prd;
if (n < 0 || n > 15)
{

}
else
{
for (i = 0; i <= n; i++)
{
for (j = 0; j <= n; j++)
{
prd = j * i;
if (j == 0)
{
printf("%i", prd);
}
else
{
if (prd < 10)
{
printf(",   %i", prd);
}
else if (prd < 100)
{
printf(",  %i", prd);
}
else
{
printf(", %i", prd);
}

}
}
putchar('\n');
}
}

}

====================
101-natural.c :
#include <stdio.h>
/**
* sum_naturals - computes and prints the sum of all the multiples of
* 3 or 5 below 1024 (excluded), followed by a new line.
*
* Return: void
*/
void sum_naturals(void)
{
	int i, sum = 0;

	for (i = 0; i < 1024; i++)
	{
		if ((i % 5 == 0) || (i % 3 == 0))
		{
			sum += i;
		}
	}
	printf("%i\n", sum);
}
/**
* main - entry point
*
* Return: 0
*/
int main(void)
{
	sum_naturals();
	return (0);
}

====================
102-fibonacci.c :
#include <stdio.h>

void fibonacci(void);
/**
* main - entry point
*
* Return: 0
*/
int main(void)
{
	fibonacci();
	return (0);
}

/**
* fibonacci - prints the first 50 Fibonacci numbers,
* starting with 1 and 2, followed by a new line.
*
* Return: void
*/
void fibonacci(void)
{
	long i, n1, n2, fib;

	n2 = 2;
	n1 = 1;
	printf("%li, %li, ", n1, n2);
	for (i = 2; i < 50; i++)
	{
		fib = n2 + n1;
		if (i == 49)
		{
			printf("%li", fib);
		}
		else
		{
			printf("%li, ", fib);
		}
		n1 = n2;
		n2 = fib;
	}
	putchar('\n');
}

====================
103-fibonacci.c :
#include <stdio.h>

void even_liber_abbaci(void);
/**
* main - entry point
*
* Return: 0
*/
int main(void)
{
	even_liber_abbaci();
	return (0);
}

/**
* even_liber_abbaci - finds and prints the sum of the even-valued
* terms, followed by a new line. By considering the terms in the
* Fibonacci sequence whose values do not exceed 4,000,000
*
* Return: void
*/
void even_liber_abbaci(void)
{
	const int max = 4000000;
	long i, n1, n2, fib, sum;

	n2 = 2;
	n1 = 1;
	sum = n2;
	for (i = 2; i < max; i++)
	{
		fib = n2 + n1;
		n1 = n2;
		n2 = fib;
		if (fib % 2 == 0 && fib < max && fib > 0)
		{
			sum += fib;
		}
	}
	printf("%li\n", sum);
}

====================
104-fibonacci.c :
#include <stdio.h>

/**
 * main - finds and prints the first 98 Fibonacci numbers,
 * starting with 1 and 2
 * followed by a new line
 * Return: ALways 0 (Success)
 */
int main(void)
{
unsigned long int i, j, k, j1, j2, k1, k2;
j = 1;
k = 2;
printf("%lu", j);
for (i = 1; i < 91; i++)
{
printf(", %lu", k);
k = k + j;
j = k - j;
}
j1 = j / 1000000000;
j2 = j % 1000000000;
k1 = k / 1000000000;
k2 = k % 1000000000;
for (i = 92; i < 99; ++i)
{
printf(", %lu%lu", k1 + (k2 / 1000000000), k2 % 1000000000);
k1 = k1 + j1;
j1 = k1 - j1;
k2 = k2 + j2;
j2 = k2 - j2;
}
printf("\n");
return (0);
}
